
                                                 ===  39. AVALIAÇÃO DE CURTO-CIRCUITO  ===


Valores que são definidos como falsy:

• false
• 0
• '' "" `` (qualquer tipo de string vazia)
• null
• undefined
• NaN



                                                               ===  46. OBJETO DATE  ===


Para se utilizar o objeto date, precisamos utilizar a palavra 'new' em seguida da função construtora 
'Date()'

Uma função construtora sempre começara com a primeira letra maiúscula



Mais sobre o objeto date => 
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Date

toLocaleDateString => 
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString

toLocaleString =>
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString



                                ===  46. OBJETO DATE (toLocaleString & toLocaleDateString)  ===


toLocaleDateString () => 
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString


toLocaleString () =>
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString


Parâmetros de option em toLocaleString() e toLocaleDateString() => 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options



                                     ===  50. ATRIBUIÇÃO VIA DESESTRUTURAÇÃO (ARRAYS)  ===


A sintaxe de atribuição via desestruturação é uma expressão JavaScript que possibilita extrair dados de arrays ou objetos em variáveis distintas.

Se o array for criado com const, todas as atribuições feitas com tal array deverá também ser const, o mesmo serve para let


==> Sintaxe:

const numeros = [1, 2, 3, 4, 5, 6, 7];
const [primeiroNumero, segundoNumero] = numeros;

console.log(primeiroNumero);  // 1
console.log(segundoNumero);  // 2



---> Pegando o resto do array

::: Para pegar o resto do array, basta adicionar 3 pontos (...) seguido do nome da variável que você quer pegar o resto, irei utilizar o exemplo acima como base.

const numeros = [1, 2, 3, 4, 5, 6, 7];
const [primeiroNumero, segundoNumero, ...resto] = numeros;

console.log(primeiroNumero);  // 1
console.log(segundoNumero);  // 2
console.log(resto);  // [3, 4, 5, 6, 7]

::: Neste exemplo a variável resto está recebendo o resto que sobrou do array.
::: O operador (...) é chamado de rest ou spread, muda dependendo do contexto.



                                   ===  50. ATRIBUIÇÃO VIA DESESTRUTURAÇÃO (MATRIZES)  ===


A sintaxe de atribuição via desestruturação é uma expressão JavaScript que possibilita extrair dados de arrays ou objetos em variáveis distintas.

Se o array (Matriz) for criada com const, todas as atribuições feitas com tal array deverá também ser const, o mesmo serve para let


==> Sintaxe:

const numeros = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ];
const [lista1, lista2, lista3] = numeros;

console.log( lista3 [2] );  // 9
console.log( lista1 [1] );  // 2



                                    ===  51. ATRIBUIÇÃO VIA DESESTRUTURAÇÃO (OBJETOS)  ===


A sintaxe de atribuição via desestruturação é uma expressão JavaScript que possibilita extrair dados de arrays ou objetos em variáveis distintas.

Se o objeto for criada com const, todas as atribuições feitas com tal objeto deverá também ser const, o mesmo serve para let


==> Sintaxe:

const pessoa = {
  nome: 'Luiz',
  sobrenome: 'Miranda',
  idade: 30,
  endereco: {
    rua: 'Av. Brasil',
    numero: 320
  }
};

// Atribuição via desestruturação
const { nome, sobrenome } = pessoa;
console.log(nome);  // Luiz
console.log(sobrenome);  // Miranda



                                                   ===  54. DOM & A ÁRVORE DO DOM  ===


Saiba mais sobre DOM => https://developer.mozilla.org/pt-BR/docs/Web/API/Document



                                              ===  55. For in - ESTRUTURA DE REPETIÇÃO  ===


A estrutura de repetição "for in" lê os índices de um array ou chaves de um objeto.


==> Sintaxe Arrays:

const frutas = [ 'Maçã', 'Pêra', 'Uva', 'Laranja' ];

for (let i in frutas) {
  console.log ( frutas[i] );
}


==> Sintaxe Objetos:

const pessoa = {
  nome: 'Luiz',
  sobrenome: 'Otávio',
  idade: 30
}

for (let chave in pessoa) {
  console.log( pessoa[chave] );
}


---> For clássico - Geralmente com iteráveis (arrays ou strings);

---> For in - Retorna o índice ou chave (string, array ou objetos);

---> For of - Retorna o valor em sí (iteráveis, arrays ou strings);



                                             ===  56. For of - ESTRUTURA DE REPETIÇÃO  ===


O loop "for of" percorre, chamando uma função personalizada com instruções a serem executadas para o valor de cada objeto distinto. 

O loop "for of" retorna o valor do Array ao invés do índice como o "for in", e não funciona para fazer loops com objetos.


---> variável:
• A cada iteração, um valor de uma propriedade diferente é atribuido à variável.

---> iteravel:
• Objeto cujos atributos serão iterados.


==> Sintaxe:

let iteravel = [10, 20, 30];

for (let value of iteravel) {
  console.log(value);
}
// 10
// 20
// 30


---> For clássico - Geralmente com iteráveis (arrays ou strings);

---> For in - Retorna o índice ou chave (string, array ou objetos);

---> For of - Retorna o valor em sí (iteráveis, arrays ou strings);


Saiba mais => https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/for...of



                                                           ===  59. BREAK & CONTINUE  ===


Break e continue funcionam para todos os tipos de laço de repetição

---> Break:
• termina o loop atual e pula para a próxima instrução no script.

---> Continue:
• termina a iteração atual, salta, volta e executa a próxima iteração.


Saiba mais => https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/continue



                              ===  63. TRATANDO & LANÇANDO ERROS (TRY, CATCH, THROW, FINALLY)  ===


==> Try...catch

As declarações try...catch marcam um bloco de declarações para testar (try), e especifica uma resposta, caso uma exceção seja lançada.


==> Sintaxe

try {

} catch() {

}


A declaração try consiste em um bloco try, que contém uma ou mais declarações, e ao menos uma cláusula catch ou uma cláusula finally, ou ambas. Ou seja, há 3 formas de declarações try :

1• try...catch
2• try...finally
3• try...catch...finally



==> Finally

A cláusula finally é executada após a excecução do bloco try e da(s) cláusula(s) catch porém antes das declarações seguintes ao try. Ela sempre é executada, independente se uma exceção for lançada ou capturada.

Você pode utilizar a cláusula finally para fazer seu script falhar graciosamente quando uma exceção ocorrer;



==> Throw

A declaração throw lança uma exceção definida pelo usuário. A execução da função atual vai parar (as instruções após o throw não serão executadas), e o controle será passado para o primeiro bloco catch na pilha de chamadas. Se nenhum bloco catch existe entre as funções "chamadoras", o programa vai terminar.


==> Sintaxe:

throw expressão;

---> expressão
• A expressão a ser lançada.



Use a instrução throw para lançar uma exceção. Quando você lança uma exceção, expressão especifica o valor da exceção. Cada uma das intruções a seguir lança uma exceção:

Exemplos:

---> throw "Erro2"; // gera uma exceção com um valor string

---> throw 42; // gera uma exceção com o valor 42

---> throw true; // gera uma exceção com o valor true



try, catch & finally => 
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/try...catch

throw => https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/throw



                                                    ===  65. SetInterval & SetTimeout  ===

indicado é utilizar o setInterval() sempre que você queria que uma determinada função seja executada entre invervalos de tempo.
E utilizar o setTimeout() quando você quiser executar um método depois de um determinado tempo.


==> SetInteval
o setInterval é executada em intervalos de tempo indefinidamente.

exemplo:
// Executa o evento a cada 10 segundos
setInterval(() => console.log('setInterval'), 10000);



==> SetTimeout
A função setTimeout é executada apenas uma unica vez após um determinado tempo.

exemplo:
// Executa o evento depois de 5 segundos
setTimeout(() => console.log('setTimeout'), 5000);



                                               ===  67. CRIANDO UMA LISTA DE TAREFAS  ===


==> Anotações importantes desta aula:

---> Para continuar o foco do cursor em um local especifico, usar o objeto .focus



::: Criar elementos HTML pelo JavaScript:
---> Para criar um novo elemento HTML pelo JavaScript basta usar o códido .createElement('');
---> E para adiciona-lo a um elemento pai basta utilizar o código .appendChild();



::: Adicionar classes ou id's pelo JavaScript:
---> Para criar uma nova classe em uma elemento HTML pelo JavaScript da para utilizar ambos os códigos;

• var.classList.add('')  =  adicionar uma classe;
• var.classList.remove('')  =  remover uma classe;

• var.setAttribute('', '')  =  adicionar classe, id, etc, entre os parenteses primeiro vem o tipo (classe, id, etc), e depois o nome dessa classe/id, exemplo: var.setAttribute('class', 'nome-da-classe');



::: Para selecionar o elemento pai de um elemento desejado:

• var.parentElement()  =  seleciona o elemento pai de algum elemento desejado;
• var.parentElement.remove()  =  Remove o elemento pai de algum elemento desejado (mas o elemento filho é eliminado junto);



::: Código para manipular o texto de uma tag pelo JavaScript:
• var.replace('' '' , '' '')  =  entre os parenteses primeiro vem o Texto a ser manipulado, e depois o texto que você deseja colocar no lugar.

Exemplo: var.replace("Vou trocar isso", "por isso");



::: Salvar e pegar itens (e somente strings) no local storage :
 • localStorage.setItem('' '' , '' '')  =  Salva itens no Local Storage, entre os parenteses primeiro vem o nome que vai ser dado ao item guardado, depois vem a variável ou outra coisa que queira salvar no local storage;

Exemplo: localStorage.setItem("nome do item", "minhaVariavel");

• localStorage.getItem()  =  Pega os itens que foram salvos pelo localStorage.setItem, pelo nome dado ao item que foi guardado;

Exemplo: localStorage.getItem("nome do item");











